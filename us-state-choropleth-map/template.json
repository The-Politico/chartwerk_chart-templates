{
    "axes": {
        "base": {
            "dateFormat": null,
            "format": {
                "double": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 1,
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 2,
                    "ticks": 7
                }
            },
            "label": "",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": "",
            "type": "categorical"
        },
        "color": {
            "byFacet": false,
            "domain": [
                "closed",
                "open"
            ],
            "ignoreScale": false,
            "quantize": false,
            "quantizeProps": {
                "column": null,
                "groups": 0,
                "reverseColors": false
            },
            "range": [
                "#329CEB",
                "#52B033"
            ],
            "scheme": "categorical.default"
        },
        "scale": {
            "prefix": "",
            "suffix": ""
        },
        "value": {
            "format": {
                "double": {
                    "customTicks": [],
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "ticks": 7
                }
            },
            "label": "",
            "max": null,
            "min": null,
            "prefix": "$",
            "shadedRegions": [],
            "suffix": ""
        }
    },
    "data": [
        {
            "State": "AL",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "AK",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "AZ",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "AR",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "CA",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "CO",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "CT",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "DE",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "FL",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "GA",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "HI",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "ID",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "IL",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "IN",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "IA",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "KS",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "KY",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "LA",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "ME",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "MD",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "MA",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "MI",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "MN",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "MS",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "MO",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "MT",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "NE",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "NV",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "NH",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "NJ",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "NM",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "NY",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "NC",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "ND",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "OH",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "OK",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "OR",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "PA",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "RI",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "SC",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "SD",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "TN",
            "Status": "open",
            "Tooltip": "This state is open"
        },
        {
            "State": "TX",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "UT",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "VT",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "VA",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "WA",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "WV",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "WI",
            "Status": "closed",
            "Tooltip": "This state is closed"
        },
        {
            "State": "WY",
            "Status": "closed",
            "Tooltip": "This state is closed"
        }
    ],
    "datamap": {
        "base": "State",
        "custom": {
            "tooltip": "Tooltip"
        },
        "facet": null,
        "ignore": [],
        "scale": "Status",
        "series": [],
        "sort": [
            "State",
            "Status",
            "Tooltip"
        ],
        "value": null
    },
    "embed": {
        "dimensions": {}
    },
    "margins": {
        "double": {
            "bottom": 0.050000000000000044,
            "left": 0.05,
            "right": 0.050000000000000044,
            "top": 0.05
        },
        "single": {
            "bottom": 0.050000000000000044,
            "left": 0.05,
            "right": 0.050000000000000044,
            "top": 0.05
        }
    },
    "scripts": {
        "dependencies": {
            "scripts": [
                "https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.3/d3.min.js",
                "https://cdnjs.cloudflare.com/ajax/libs/topojson/1.6.20/topojson.min.js"
            ],
            "styles": [
                "https://cloud.typography.com/6922714/7642152/css/fonts.css",
                "https://interactives.dallasnews.com/common/fonts/gotham.css"
            ]
        },
        "draw": "function draw(){\n    var initialProps = {\n        dims: {\n          single: { width: 270, height: 205 },\n          double: { width: 580, height: 370}\n        },\n    };\n    \n    var werk = werkHelper.build(initialProps);\n\t\n\tvar comma = d3.format(\",\");\n\n    var map = d3.map(werk.data, function(d){ return d.state; }),\n        path = d3.geoPath(),\n        postal = werk.data[0].state.length === 2; // If state label is a postal code\n\t\n\tvar svg = d3.select(\"#chart\").append(\"svg\")\n      .style(\"background-color\",\"transparent\")\n        .attr(\"width\", werk.dims.svg.width + werk.dims.margins.left + werk.dims.margins.right)\n        .attr(\"height\", werk.dims.svg.height + werk.dims.margins.top + werk.dims.margins.bottom)\n      .append(\"g\")\n        .attr(\"transform\", \"translate(\" + werk.dims.margins.left + \",\" + werk.dims.margins.top + \")\");\n    \n    var projection = d3.geoAlbersUsa()\n        // Scale for different sizes\n        .scale(chartwerk.ui.size === 'double' ? 720 : 350);\n\n    function getState(d){\n        return postal ? map.get(d.properties.ABBREVIATION) : map.get(d.properties.NAME);\n    }\n    \n    d3.json(\"//interactives.dallasnews.com/common/data/geo/us-states.json\", function(error, us_states){\n\n        var states = svg.append(\"g\")\n            .attr(\"id\", \"states\")\n            // Have to recenter, probably because this map originally had Puerto Rico in it...\n            .attr(\"transform\", chartwerk.ui.size === 'double' ? \"translate(-220, -90)\" : \"translate(-360, -160)\")\n            .selectAll(\"path\")\n            .data(topojson.feature(us_states, us_states.objects.us_states).features)\n            .enter().append(\"path\")\n            .attr('d', d3.geoPath().projection(projection))\n            .attr(\"class\", \"state\")\n            .style('fill', function(d){ \n                return werk.scales.color(getState(d).value);\n            })\n            .style(\"stroke\", \"#fff\")\n            .on(\"mouseover\",function(d){\n                d3.select(this)\n                  .style(\"stroke\", \"black\")\n                  .moveToFront();\n                d3.select(\".tooltip .title\")\n                  .text(d.properties.NAME);\n                d3.select(\".tooltip .value\")\n                  .text(function(){\n                      var s = chartwerk.axes.scale;\n                      var data = getState(d);\n                      if (data.tooltip){\n                          return data.tooltip;\n                      } else {\n                          return chartwerk.axes.color.quantize ? \n                            s.prefix + comma(data.value) + s.suffix : data.value;\n                      }\n                  });\n                var p = d3.mouse(this.parentElement.parentElement);\n                d3.select(\".tooltip\")\n                    .style(\"opacity\", 1)\n                    .style(\"top\",function(){\n                        return p[1].toString() + \"px\";\n                    })\n                    .style(\"left\", function(){\n                        // We position either left or right of the mouse point based\n                        // on whether we're past the midpoint of the chart. This protects\n                        // against tooltips overflowing embedded iframes.\n                        var s = chartwerk.ui.size,\n                            w = werk.dims[s].width,\n                            tipW = parseInt(d3.select(\".tooltip\").style(\"width\"), 10),\n                            pos = p[0] > (w / 2) ?\n                                p[0] - (tipW - 10) : p[0] + 40;\n                        return pos.toString() + \"px\";\n                    });\n            })\n            .on(\"mouseout\",function(){\n                d3.select(this)\n                  .style(\"stroke\",\"#fff\")\n                  .style('fill', function(d){ \n                      return werk.scales.color(getState(d).value);\n                });\n                d3.select(\".tooltip\")\n                    .style(\"opacity\", 0);\n            });\n    });\n    \n    var tooltip = d3.select(\"#chart\")\n      .append(\"div\")\n        .attr(\"class\",\"tooltip\")\n        .style(\"position\",\"absolute\");\n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"title\")\n      .text(chartwerk.datamap.scale);\n    tooltip\n      .append(\"div\")\n      .attr(\"class\",\"value\");\n}",
        "helper": "var werkHelper = {\n    prototype: function() {\n        d3.selection.prototype.moveToFront = function() {\n          return this.each(function(){\n            this.parentNode.appendChild(this);\n          });\n        };\n    },\n    \n    parse: function(werk){\n        werk.data = chartwerk.data.map(function(d){\n            return {\n                state: d[chartwerk.datamap.base],\n                value: chartwerk.axes.color.quantize ? \n                    +d[chartwerk.datamap.scale] : d[chartwerk.datamap.scale],\n                tooltip: chartwerk.datamap.custom.tooltip !== '' ?\n                    d[chartwerk.datamap.custom.tooltip] : null,\n            };\n        });\n    },\n    \n    dims: function(werk){\n        var s = chartwerk.ui.size;\n            w = werk.dims[s].width,\n            h = werk.dims[s].height,\n            margins = {\n                right: chartwerk.margins[s].right * w,\n                left: chartwerk.margins[s].left * w,\n                top: chartwerk.margins[s].top * h,\n                bottom: chartwerk.margins[s].bottom * h\n            },\n            svg = {\n                width: w - margins.left - margins.right,\n                height: h - margins.top - margins.bottom\n            };\n        \n        werk.dims.margins = margins;\n        werk.dims.svg = svg;\n    },\n\n    scales: function(werk){\n        var svg = werk.dims.svg;\n        werk.scales = {\n            color: chartwerk.axes.color.quantize ? \n                d3.scaleThreshold() : d3.scaleOrdinal(),\n        };\n        \n        werk.scales.color\n            .domain(chartwerk.axes.color.domain)\n            .range(chartwerk.axes.color.range);\n    },\n\n    // Build dims, scales and axes.\n    build: function(werk){\n        this.prototype();\n        this.parse(werk);\n        this.dims(werk);\n        this.scales(werk);\n        return werk;\n    },\n};\n\n",
        "html": "<div id='chart-header'>\n\t<h2 id='headline'></h2>\n\t<div id='chatter'></div> \n</div> \n<div id='chart-ui'>\n\t<!--You can put any necessary buttons, etc., here.-->\n</div>\n<div id='chart-legend'></div>\n<div id='chart'></div> \n<div id='chart-footer'> \n\t<div id='footnote'></div> \n\t<div id='source'></div> \n\t<div id='author'></div> \n</div>",
        "styles": "#chartwerk {\n    font-family:'proxima-nova', arial, sans-serif;\n    font-weight: 200;\n    width:600px;\n}\n#chartwerk #chart {\n    background: white;\n}\n#chartwerk.single{\n    width:290px;\n    float:left;\n    overflow:hidden;\n    margin:10px 30px 10px 0;\n}\n#chartwerk #headline { \n    font-weight:bold;\n    font-size:24px;\n}\n#chartwerk #chatter {\n    margin-top:5px;\n}\n#chartwerk #footnote,\n#chartwerk #source,\n#chartwerk #author {\n    font-size:11px;\n    color:grey;\n\n}\n#chartwerk #author {\n    text-align:right;\n}\n\n#chartwerk #chart-legend \n.chart-legend-container .key-label{\n    font: 11px 'proxima-nova', arial, sans-serif;\n    font-weight: 200;\n}\n#chartwerk #chart path.line{\n    fill: none;\n    stroke-width: 2px;\n}\n#chartwerk #chart-legend{\n    margin-top:10px;\n}\n\n#chartwerk #chart path.state{\n    stroke-width:1px;\n    cursor:crosshair;\n}\n#chartwerk #chart{\n    position:relative;\n}\n#chartwerk #chart .tooltip{\n    font: 13px 'proxima-nova', arial, sans-serif;\n    font-weight: 200;\n    opacity:0;\n    pointer-events:none;\n    background:rgba(255,255,255,.75);\n    padding:5px;\n    width:auto;\n}\n#chartwerk #chart .tooltip .title{\n    font-weight: bold;\n    fill:grey;\n}"
    },
    "template": {
        "description": "Use this map if you want to compare states.\n\nYour data must include a column of state names, either as full text, like \"Texas,\" or as postal abbreviations, like \"TX.\" This column should be classified as a \"Base axis.\"\n\nYou should classify your value column as a \"Scale column\" on the data tab.",
        "icon": null,
        "tags": [],
        "title": "US state choropleth map"
    },
    "text": {
        "annotations": [],
        "author": "John Doe / POLITICO",
        "chatter": "States that are either open or closed.",
        "footnote": "",
        "headline": "State-craft",
        "legend": {
            "active": true,
            "double": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 500
            },
            "keys": [
                {
                    "color": "#329CEB",
                    "text": "Closed"
                },
                {
                    "color": "#52B033",
                    "text": "Open"
                }
            ],
            "single": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 250
            },
            "title": ""
        },
        "source": "SOURCE: New York Stock Exchange",
        "title": ""
    },
    "ui": {
        "datamap": [
            {
                "alias": "State",
                "available": true,
                "class": "base"
            },
            {
                "alias": "value axis",
                "available": false,
                "class": "value"
            },
            {
                "alias": "Color value",
                "available": true,
                "class": "scale"
            },
            {
                "alias": "data series",
                "available": false,
                "class": "series"
            },
            {
                "alias": "faceting column",
                "available": false,
                "class": "facet"
            },
            {
                "alias": "ignored column",
                "available": false,
                "class": "ignore"
            },
            {
                "alias": "Tooltip",
                "available": true,
                "class": "tooltip"
            }
        ],
        "rawData": "State\tStatus\tTooltip\nAL\tclosed\tThis state is closed\nAK\tclosed\tThis state is closed\nAZ\topen\tThis state is open\nAR\tclosed\tThis state is closed\nCA\tclosed\tThis state is closed\nCO\tclosed\tThis state is closed\nCT\tclosed\tThis state is closed\nDE\tclosed\tThis state is closed\nFL\tclosed\tThis state is closed\nGA\topen\tThis state is open\nHI\tclosed\tThis state is closed\nID\tclosed\tThis state is closed\nIL\tclosed\tThis state is closed\nIN\tclosed\tThis state is closed\nIA\tclosed\tThis state is closed\nKS\topen\tThis state is open\nKY\tclosed\tThis state is closed\nLA\tclosed\tThis state is closed\nME\tclosed\tThis state is closed\nMD\topen\tThis state is open\nMA\tclosed\tThis state is closed\nMI\tclosed\tThis state is closed\nMN\topen\tThis state is open\nMS\tclosed\tThis state is closed\nMO\tclosed\tThis state is closed\nMT\tclosed\tThis state is closed\nNE\topen\tThis state is open\nNV\tclosed\tThis state is closed\nNH\tclosed\tThis state is closed\nNJ\topen\tThis state is open\nNM\tclosed\tThis state is closed\nNY\tclosed\tThis state is closed\nNC\tclosed\tThis state is closed\nND\topen\tThis state is open\nOH\topen\tThis state is open\nOK\tclosed\tThis state is closed\nOR\topen\tThis state is open\nPA\topen\tThis state is open\nRI\tclosed\tThis state is closed\nSC\tclosed\tThis state is closed\nSD\tclosed\tThis state is closed\nTN\topen\tThis state is open\nTX\tclosed\tThis state is closed\nUT\tclosed\tThis state is closed\nVT\tclosed\tThis state is closed\nVA\tclosed\tThis state is closed\nWA\tclosed\tThis state is closed\nWV\tclosed\tThis state is closed\nWI\tclosed\tThis state is closed\nWY\tclosed\tThis state is closed\n",
        "size": "single"
    }
}