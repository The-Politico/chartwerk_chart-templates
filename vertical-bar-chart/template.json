{
    "axes": {
        "base": {
            "dateFormat": null,
            "format": {
                "double": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 1,
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 2,
                    "ticks": 7
                }
            },
            "label": "",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": "",
            "type": "categorical"
        },
        "color": {
            "byFacet": false,
            "domain": [
                "Abbreviated",
                "Letter count"
            ],
            "ignoreScale": false,
            "quantize": false,
            "quantizeProps": {
                "column": null,
                "groups": 0,
                "reverseColors": false
            },
            "range": [
                "#E34E36",
                "#329CEB"
            ],
            "scheme": "categorical.default"
        },
        "scale": {
            "prefix": "",
            "suffix": ""
        },
        "value": {
            "format": {
                "double": {
                    "customTicks": [],
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "ticks": 7
                }
            },
            "label": "Letter counts",
            "max": 10,
            "min": 0,
            "prefix": "",
            "shadedRegions": [],
            "suffix": ""
        }
    },
    "data": [
        {
            "Abbreviated": 3,
            "Letter count": 8,
            "State": "Virginia"
        },
        {
            "Abbreviated": 3,
            "Letter count": 8,
            "State": "Missouri"
        },
        {
            "Abbreviated": 4,
            "Letter count": 4,
            "State": "Iowa"
        },
        {
            "Abbreviated": 5,
            "Letter count": 5,
            "State": "Texas"
        }
    ],
    "datamap": {
        "base": "State",
        "custom": {},
        "facet": null,
        "ignore": [],
        "scale": null,
        "series": [
            "Letter count",
            "Abbreviated"
        ],
        "sort": [
            "State",
            "Letter count",
            "Abbreviated"
        ],
        "value": null
    },
    "embed": {
        "dimensions": {}
    },
    "margins": {
        "double": {
            "bottom": 0.07999999999999996,
            "left": 0.06,
            "right": 0.020000000000000018,
            "top": 0.05
        },
        "single": {
            "bottom": 0.10999999999999999,
            "left": 0.11,
            "right": 0.020000000000000018,
            "top": 0.05
        }
    },
    "scripts": {
        "dependencies": {
            "scripts": [
                "https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.3/d3.min.js"
            ],
            "styles": [
                "https://cloud.typography.com/6922714/7642152/css/fonts.css",
                "https://interactives.dallasnews.com/common/fonts/gotham.css"
            ]
        },
        "draw": "function draw() {\n\n    var initialProps = {\n        dims: {\n          single: { width: 260, height: 225 },\n          double: { width: 540, height: 250}\n        },\n    };\n    \n    // Returns object with properties and methods representing\n    // dimensions, scales, axes, etc.\n    var werk = werkHelper.build(initialProps);\n\n    var hasYAxisLabel = chartwerk.axes.value.label !== '';\n    var yAxisLabelHeight = 20;\n\n    var totalSvgHeight = hasYAxisLabel ? (\n        werk.dims.svg.height + yAxisLabelHeight\n    ) : (\n        werk.dims.svg.height\n    );\n\n    var svg = d3.select('#chart').append('svg')\n            .style('background-color', 'transparent')\n            .attr(\n                'width',\n                (\n                    werk.dims.margins.left +\n                    werk.dims.svg.width +\n                    werk.dims.margins.right\n                )\n            )\n            .attr(\n                'height',\n                (\n                    werk.dims.margins.top +\n                    totalSvgHeight +\n                    werk.dims.margins.bottom\n                )\n            );\n\n    var chartTop = hasYAxisLabel ? werk.dims.margins.top + yAxisLabelHeight : werk.dims.margins.top;\n\n    var g = svg.append('g')\n        .attr(\n            'transform',\n            'translate(' +\n                werk.dims.margins.left + ',' +\n                chartTop +\n            ')'\n        );\n\n    var xAxis = g.append('g')\n        .attr('class', 'x axis')\n        .attr('transform', 'translate(0,' + werk.dims.svg.height + ')')\n        .call(werk.axes.x);\n\n    var yAxis = g.append('g')\n            .attr('class', 'y axis')\n            .call(werk.axes.y);\n\n    if (chartwerk.ui.size === 'double') {\n        yAxis.attr('transform', 'translate(0,-1)');\n    }\n\n    if (hasYAxisLabel) {\n        yAxis.append('text')\n            .attr('class', 'label')\n            .attr('y', -werk.dims.margins.top + 15  - yAxisLabelHeight)\n            .attr('x', -werk.dims.margins.left)\n            .style('text-anchor', 'start')\n            .text(chartwerk.axes.value.label);\n    }\n\n    g.append('g')\n        .selectAll('g')\n        .data(chartwerk.data)\n        .enter().append('g')\n            .attr('class', function(d) {\n                return d[chartwerk.datamap.base].toLowerCase() + '-group';\n            })\n            .attr(\n                'transform',\n                function(d) {\n                    return (\n                        'translate(' +\n                        werk.scales.x0(d[chartwerk.datamap.base]) +\n                        ',0)'\n                    );\n                }\n            )\n        .selectAll('rect')\n        .data(\n            function(d) {\n                var keys = chartwerk.axes.color.domain.sort();\n\n                return keys.map(function(key) { return {key: key, value: d[key]}; });\n            }\n        )\n        .enter().append('rect')\n            .attr('x', function(d) { return werk.scales.x1(d.key); })\n            .attr('y', function(d) {\n                // \n                return (d.value >= 0) ? (werk.scales.y(d.value)) : (werk.scales.y(0));\n            })\n            .attr('width', werk.scales.x1.bandwidth())\n            .attr('height', function(d) {\n                return Math.abs(werk.scales.y(d.value) - werk.scales.y(0));\n                // return (\n                //     d.value >= 0\n                // ) ? (\n                //     werk.dims.svg.height - werk.scales.y(d.value)\n                // ) : (\n                //     werk.scales.\n                // );\n            })\n            .attr('fill', function(d) { return werk.scales.color(d.key); })\n            .attr('class', 'bar')\n            .style('pointer-events', 'fill')\n                .on('mouseout',  hideTooltip)\n                .on('mousemove', showTooltip);\n\n    if (werk.highlightZeroLine) {\n        g.append('line')\n            .attr('class', 'zero')\n            .attr('x1', 0)\n            .attr('x2', werk.dims.svg.width)\n            .attr('y1', werk.scales.y(0))\n            .attr('y2', werk.scales.y(0));\n    }\n\n    var tooltip = d3.select('#chart')\n      .append('div')\n        .attr('class', 'tooltip')\n        .style('position', 'absolute');\n\n    tooltip\n      .append('div')\n      .attr('class', 'value');\n\n    function showTooltip() {\n        var columnData = d3.select(this).datum();\n\n        var tooltipColor = werk.scales.color(columnData.key);\n\n        var comma = d3.format(',');\n\n        d3.select('.tooltip .value')\n          .style('color', tooltipColor)\n          .text(function(){\n              var v = chartwerk.axes.value;\n              return v.prefix + comma(columnData.value) + v.suffix;\n          });\n\n        var p = d3.mouse(this.parentElement.parentElement);\n\n        d3.select('.tooltip')\n            .style('opacity', 1)\n            .style('top', function(){\n                var s = chartwerk.ui.size;\n\n                var h = werk.dims[s].height;\n\n                var pos = p[1] > (h / 2) ? p[1] + 10 : p[1] + 20;\n\n                return pos.toString() + 'px';\n            })\n            .style(\"left\", function(){\n                // We position either left or right of the mouse point based\n                // on whether we're past the midpoint of the chart. This protects\n                // against tooltips overflowing embedded iframes.\n                var s = chartwerk.ui.size;\n\n                var w = werk.dims[s].width;\n\n                var tipW = parseInt(d3.select(\".tooltip\").style(\"width\"), 10);\n\n                var pos = p[0] > (w / 2) ? p[0] - (tipW - 20) : p[0] + 40;\n\n                return pos.toString() + \"px\";\n            });\n    }\n\n    function hideTooltip() {\n      d3.select(\".tooltip\").style(\"opacity\", 0);\n    }\n}",
        "helper": "var werkHelper = {\n    parse: function(werk){\n        if (chartwerk.datamap.base === null) {\n            // If the chart doesn't have a base axis, raise an error.\n        } else {\n            // Otherwise, parse the data as passed.\n            werk.data = chartwerk.axes.color.domain.map(function(category){\n                return {\n                    name: category,\n                    values: chartwerk.data.map(function(d){\n                        return { x: d[chartwerk.datamap.base], y: d[category] };\n                    })\n                    .sort(function(a, b){ return d3.ascending(a.x, b.x); })\n                };\n            });\n        }\n    },\n    \n    dims: function(werk){\n        var s = chartwerk.ui.size;\n            w = werk.dims[s].width,\n            h = werk.dims[s].height,\n\n            margins = {\n                right: chartwerk.margins[s].right * w,\n                left: chartwerk.margins[s].left * w,\n                top: chartwerk.margins[s].top * h,\n                bottom: chartwerk.margins[s].bottom * h\n            },\n            svg = {\n                width: w - margins.left - margins.right,\n                height: h - margins.top - margins.bottom\n            };\n\n        werk.dims.margins = margins;\n        werk.dims.svg = svg;\n    },\n\n    scales: function(werk){\n        var svg = werk.dims.svg;\n\n        werk.scales = {\n            x0: d3.scaleBand()\n                    .rangeRound([0, svg.width]),\n            x1: d3.scaleBand()\n                    .padding(0.05),\n            y: d3.scaleLinear()\n                    .rangeRound([svg.height, 0]),\n            color: chartwerk.axes.color.range.length > 1 ? (\n                d3.scaleOrdinal()\n                  .domain(chartwerk.axes.color.domain)\n                  .range(chartwerk.axes.color.range)\n            ) : (\n                function(d) { return chartwerk.axes.color.range[0]; }\n            ),\n        };\n    },\n\n    baseDomain:  function(werk) {\n        var keys = chartwerk.axes.color.domain.sort();\n\n        werk.scales.x0.domain(\n            chartwerk.data.map(\n                function(dataPoint) { return dataPoint[chartwerk.datamap.base]; }\n            ).sort()\n        );\n        werk.scales.x1.domain(keys).rangeRound([0, werk.scales.x0.bandwidth()]);\n    },\n\n    valueDomain: function(werk) {\n        var keys = chartwerk.axes.color.domain.sort();\n\n        var useDefaultMin = (\n            (chartwerk.axes.value.min !== null) &&\n            (!isNaN(chartwerk.axes.value.min))\n        );\n\n        var dataMin = (useDefaultMin) ? (chartwerk.axes.value.min) : (\n            d3.min(chartwerk.data, function(d) {\n                return d3.min(keys, function(key) { return d[key]; });\n            })\n        );\n\n        if ((!useDefaultMin) && (dataMin > 0)) { dataMin = 0; }\n\n        var useDefaultMax = (\n            (chartwerk.axes.value.max !== null) &&\n            (!isNaN(chartwerk.axes.value.max))\n        );\n\n        var dataMax = (useDefaultMax) ? (chartwerk.axes.value.max) : (\n            d3.max(chartwerk.data, function(d) {\n                return d3.max(keys, function(key) { return d[key]; });\n            })\n        );\n\n        var extents = {\n            min: dataMin,\n            max: dataMax\n        };\n\n        werk.scales.y.domain([extents.min, extents.max]).nice();\n    },\n\n    axes: function(werk) {\n        werk.axes = {\n            x: d3.axisBottom(werk.scales.x0)\n                    .tickSizeInner(6)\n                    .tickSizeOuter(0)\n                    .tickPadding(3),\n\n            y: d3.axisLeft(werk.scales.y)\n                    .tickSizeInner(-werk.dims.svg.width)\n                    .tickSizeOuter(0)\n                    .tickPadding(7)\n                    .tickFormat( function(d){ \n                        var formatter = werk.scales.y.tickFormat();\n                        if (d >= 0) {\n                            return formatter(d) === '0' ? '0' : (\n                                chartwerk.axes.value.prefix +\n                                formatter(d) +\n                                chartwerk.axes.value.suffix\n                            );\n                        } else {\n                            return (\n                                '-' +\n                                chartwerk.axes.value.prefix +\n                                formatter(Math.abs(d)) +\n                                chartwerk.axes.value.suffix\n                            );\n                        }\n                    }),\n        };\n    },\n\n    valueTicks: function(werk){\n        var s = chartwerk.ui.size;\n\n        if (chartwerk.axes.value.format[s].customTicks.length > 0) { \n            werk.axes.y.tickValues(\n                chartwerk.axes.value.format[s].customTicks\n            );\n        } else {\n            hasTickConfig = (\n                chartwerk.axes.value.format[s].ticks !== null\n            ) && (\n                !isNaN(chartwerk.axes.value.format[s].ticks)\n            );\n\n            if (hasTickConfig) {\n                werk.axes.y.ticks(\n                    chartwerk.axes.value.format[s].ticks\n                );\n            }\n        }\n    },\n\n    highlightZero: function(werk) {\n        var keys = chartwerk.axes.color.domain.sort();\n\n        var dataMin = (\n            (chartwerk.axes.value.min !== null) &&\n            (!isNaN(chartwerk.axes.value.min))\n        ) ? (\n            chartwerk.axes.value.min\n        ) : (\n            d3.min(chartwerk.data, function(d) {\n                return d3.min(keys, function(key) { return d[key]; });\n            })\n        );\n\n        werk.highlightZeroLine = (dataMin < 0);\n    },\n\n    // Build dims, scales and axes.\n    build: function(werk){\n        this.parse(werk);\n        this.dims(werk);\n        this.scales(werk);\n        this.baseDomain(werk);\n        this.valueDomain(werk);\n        this.axes(werk);\n        this.valueTicks(werk);\n        this.highlightZero(werk);\n        return werk;\n    },\n};",
        "html": "<div id='chart-header'>\n\t<h2 id='headline'></h2>\n\t<div id='chatter'></div> \n</div> \n<div id='chart-ui'>\n\t<!--You can put any necessary buttons, etc., here.-->\n</div>\n<div id='chart-legend'></div>\n<div id='chart'></div> \n<div id='chart-footer'> \n\t<div id='footnote'></div> \n\t<div id='source'></div> \n\t<div id='author'></div> \n</div>",
        "styles": "#chartwerk {\n    font-family: 'Gotham A', 'Gotham B', arial, sans-serif; \n    width: 560px;\n}\n#chartwerk.single {\n    float: left;\n    margin: 10px 30px 10px 0;\n    overflow: hidden;\n    width: 270px;\n}\n#chartwerk #headline { \n    font-size: 24px;\n    font-weight: bold;\n}\n#chartwerk #chatter {\n    font-size: 14px;\n    line-height: 19px;\n    margin-bottom: 5px;\n    margin-top: 5px;\n}\n#chartwerk #footnote,\n#chartwerk #source,\n#chartwerk #author {\n    color: grey;\n    font-size: 11px;\n}\n#chartwerk #author {\n    text-align: right;\n}\n#chartwerk #chart {\n    background-color: white;\n}\n#chartwerk #chart-legend .chart-legend-container .key-label {\n    font: 11px 'Gotham A', 'Gotham B', arial, sans-serif;\n}\n#chartwerk #chart-legend .chart-legend-container .key-color {\n    margin-right: 2px;\n}\n#chartwerk #chart-legend .chart-legend-container .key {\n    margin-right: 8px;\n}\n#chartwerk .annotation p {\n    font-family: 'Gotham A', 'Gotham B', arial, sans-serif;\n}\n#chartwerk #chart .tooltip {\n    background: rgba(255,255,255,.75);\n    font: 13px 'Gotham A', 'Gotham B', arial, sans-serif;\n    opacity: 0;\n    padding: 5px;\n    pointer-events: none;\n    width: auto;\n}\n#chartwerk #chart .tooltip .value {\n    font-weight: bold;\n}\n#chartwerk #chart path.line {\n    fill: none;\n    stroke-width: 2px;\n}\n.axis path,\n.axis line {\n  fill: none;\n  shape-rendering: crispEdges;\n  stroke: rgb(180,180,180);\n}\n.axis text {\n    fill: rgb(132,132,132);\n    font-family: 'Gotham A', 'Gotham B', 'Montserrat', arial, sans-serif;\n    font-size: 11px;\n}\n.y.axis line {\n    stroke-dasharray: 3px 3px;\n}\n.y.axis path {\n    display:none;\n}\n.y.axis .label {\n    font-family: 'Gotham A', 'Gotham B', 'Montserrat', arial, sans-serif;\n    font-weight: normal;\n}\nrect.shaded-area{\n    fill: #DDDDDD;\n}\nline.zero {\n    stroke: #000000;\n    stroke-width: 1px;\n}"
    },
    "template": {
        "description": "Use vertical bar charts when you want to show comparisons of quantity. Examples include population by city, touchdowns by player or sales by vehicle model.\n\nAs a general rule, vertical bar charts should not be used to show trends over time, for example, how many homes are purchased each year. Use a line chart instead.\n\nYour data should contain:\n    * A column with categorical labels (like \u201cDallas\u201d, \u201cPhiladelphia\u201d, \u201cLos Angeles\u201d, etc.) that will serve as the categories for every bar or bar group.\n    * A column (or multiple columns) with numeric values that will determine the height of each bar.\n\n*Note:* Each category may contain more than one bar -- for example, you can plot major Texas cities (as categories) and show separate bars for the number of barbecue restaurants and the number of steakhouses in each city.",
        "icon": null,
        "tags": [],
        "title": "Vertical bar chart"
    },
    "text": {
        "annotations": [],
        "author": "Jane Doe / DMN",
        "chatter": "Some states even have more letters in their names and abbreviations than others do.",
        "footnote": "",
        "headline": "States have names",
        "legend": {
            "active": true,
            "double": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 500
            },
            "keys": [
                {
                    "color": "#E34E36",
                    "text": "Abbreviation"
                },
                {
                    "color": "#329CEB",
                    "text": "Full name"
                }
            ],
            "single": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 250
            },
            "title": ""
        },
        "source": "SOURCE: Pew Research",
        "title": ""
    },
    "ui": {
        "datamap": [
            {
                "alias": "Category",
                "available": true,
                "class": "base"
            },
            {
                "alias": "Single value",
                "available": true,
                "class": "value"
            },
            {
                "alias": "scale axis",
                "available": false,
                "class": "scale"
            },
            {
                "alias": "Grouped value",
                "available": true,
                "class": "series"
            },
            {
                "alias": "faceting column",
                "available": false,
                "class": "facet"
            },
            {
                "alias": "Ignored column",
                "available": true,
                "class": "ignore"
            }
        ],
        "rawData": "State\tLetter count\tAbbreviated\nVirginia\t8\t3\nMissouri\t8\t3\nIowa\t4\t4\nTexas\t5\t5",
        "size": "single"
    }
}