{
    "axes": {
        "base": {
            "dateFormat": null,
            "format": {
                "double": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 1,
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "dateString": "Y",
                    "frequency": 2,
                    "ticks": 7
                }
            },
            "label": "",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": "",
            "type": "categorical"
        },
        "color": {
            "byFacet": false,
            "domain": [
                "Numbers"
            ],
            "ignoreScale": false,
            "quantize": false,
            "quantizeProps": {
                "column": null,
                "groups": 0,
                "reverseColors": false
            },
            "range": [
                "#52B033"
            ],
            "scheme": "categorical.default"
        },
        "scale": {
            "prefix": "",
            "suffix": ""
        },
        "value": {
            "format": {
                "double": {
                    "customTicks": [],
                    "ticks": 7
                },
                "single": {
                    "customTicks": [],
                    "ticks": 7
                }
            },
            "label": "",
            "max": null,
            "min": null,
            "prefix": "",
            "shadedRegions": [],
            "suffix": ""
        }
    },
    "data": [
        {
            "Numbers": 8,
            "State": "Kentucky"
        },
        {
            "Numbers": 13,
            "State": "Massachusetts"
        },
        {
            "Numbers": 7,
            "State": "Arizona"
        },
        {
            "Numbers": 8,
            "State": "Missouri"
        },
        {
            "Numbers": 10,
            "State": "California"
        },
        {
            "Numbers": 8,
            "State": "New York"
        },
        {
            "Numbers": 5,
            "State": "Texas"
        }
    ],
    "datamap": {
        "annotations": [],
        "base": "State",
        "custom": {},
        "facet": null,
        "ignore": [],
        "scale": null,
        "series": [],
        "sort": [],
        "value": "Numbers"
    },
    "embed": {
        "dimensions": {}
    },
    "margins": {
        "double": {
            "bottom": 0.040000000000000036,
            "left": 0.09,
            "right": 0,
            "top": 0.04
        },
        "single": {
            "bottom": 0.040000000000000036,
            "left": 0.19,
            "right": 0,
            "top": 0.04
        }
    },
    "scripts": {
        "dependencies": {
            "scripts": [
                "https://cdnjs.cloudflare.com/ajax/libs/d3/4.2.3/d3.min.js"
            ],
            "styles": [
                "https://cloud.typography.com/6922714/7642152/css/fonts.css",
                "https://interactives.dallasnews.com/common/fonts/gotham.css"
            ]
        },
        "draw": "function draw(){\n\n    var initialProps = {\n        dims: {\n          single: { width: 260, height: 225 },\n          double: { width: 540, height: 250}\n        },\n    };\n    \n    // Returns object with properties and methods representing\n    // dimensions, scales, axes, etc.\n    var werk = werkHelper.build(initialProps);\n    \n    var comma = d3.format(\",\");\n    \n    var div = d3.select(\"#chart\")\n        .append(\"div\")\n        .style(\"margin\", \n            werk.dims.margins.top + \"px \" +\n            werk.dims.margins.right + \"px \" +\n            werk.dims.margins.bottom + \"px \" +\n            werk.dims.margins.left + \"px \"\n        );\n    \n    \n    var response = div.selectAll(\".response\")\n        .data(werk.data)\n      .enter().append(\"div\")\n        .attr(\"class\",\"response\");\n    \n    var bar = response.append(\"div\")\n        .attr(\"class\", \"bar\")\n        .style(\"background-color\", chartwerk.axes.color.range[0])\n        .style(\"width\", function(d){ return werk.scales.x(d.value) + 'px'; });\n    \n    bar.append(\"div\")\n        .attr(\"class\",\"name label\")\n      .append(\"p\")\n        .text(function(d){ return d.name;});\n        \n    bar.append(\"div\")\n        .attr(\"class\",\"value label\")\n      .append(\"p\")\n        .attr(\"class\", function(d){\n            return werk.scales.x(d.value) < 75 ?\n                'offset' : '';\n        })\n        .style(\"width\", function(d){\n            return werk.scales.x(d.value) < 75 ?\n                werk.dims.div.width - this.parentElement.parentElement.clientWidth + 'px' : '';\n        })\n        .style(\"margin-left\", function(d){\n            return werk.scales.x(d.value) < 75 ?\n                this.parentElement.parentElement.clientWidth + 'px' : '';\n        })\n        .text(function(d){\n            return chartwerk.axes.value.prefix + comma(String(d.value)) + chartwerk.axes.value.suffix;\n        });\n    \n\n}",
        "helper": "var werkHelper = {\n    parse: function(werk){\n        \n        werk.data = chartwerk.data.map(function(d){\n            return {\n                name: d[chartwerk.datamap.base].toString(),\n                value: d[chartwerk.datamap.value]\n            };\n        });\n    },\n    \n    dims: function(werk){\n        var s = chartwerk.ui.size;\n            w = werk.dims[s].width,\n            h = werk.dims[s].height,\n            // Add a little extra left margin to accomondate labels\n            maxLen = d3.max(werk.data, function(d){ return d.name.length; })\n            margins = {\n                right: chartwerk.margins[s].right * w,\n                left: chartwerk.margins[s].left * w + (maxLen * 4),\n                top: chartwerk.margins[s].top * h,\n                bottom: chartwerk.margins[s].bottom * h\n            },\n            div = {\n                width: w - margins.left - margins.right,\n                height: h - margins.top - margins.bottom\n            };\n            console.log(maxLen);\n        \n        \n        werk.dims.margins = margins;\n        werk.dims.div = div;\n    },\n\n    scales: function(werk){\n        var div = werk.dims.div;\n        werk.scales = {\n            x: d3.scaleLinear()\n                .range([0, div.width]),\n        };\n    },\n    \n\n    valueDomain: function(werk){\n        var max = d3.max(werk.data, function(d) { \n                return d.value; \n            });\n        \n        if (chartwerk.axes.value.min && chartwerk.axes.value.max) {\n            werk.scales.x.domain(\n                [chartwerk.axes.value.min, chartwerk.axes.value.max]\n            );\n        } else if (chartwerk.axes.value.min) {\n            werk.scales.x.domain(\n                [chartwerk.axes.value.min, max ]\n            );\n        } else if (chartwerk.axes.value.max) {\n            werk.scales.x.domain(\n                [0, chartwerk.axes.value.max]\n            );\n        } else {\n            werk.scales.x.domain([0, max]);\n        }\n        \n        werk.scales.x.nice();\n    },\n\n\n    // Build dims, scales and axes.\n    build: function(werk){\n        this.parse(werk);\n        this.dims(werk);\n        this.scales(werk);\n        this.valueDomain(werk);\n        return werk;\n    },\n};",
        "html": "<div id='chart-header'>\n\t<h2 id='headline'></h2>\n\t<div id='chatter'></div> \n</div> \n<div id='chart-ui'>\n\t<!--You can put any necessary buttons, etc., here.-->\n</div>\n<div id='chart-legend'></div>\n<div id='chart'></div> \n<div id='chart-footer'> \n\t<div id='footnote'></div> \n\t<div id='source'></div> \n\t<div id='author'></div> \n</div>",
        "styles": "#chartwerk {\n    width:560px;\n}\n#chartwerk div{\n    font-family:'proxima-nova', arial, sans-serif;\n    font-weight: 200;\n}\n#chartwerk.single{\n    width:270px;\n    float:left;\n    overflow:hidden;\n    margin:10px 30px 10px 0;\n}\n#chartwerk #headline { \n    font-weight:bold;\n    font-size:24px;\n}\n#chartwerk #chatter {\n    margin-top:5px;\n    font-size:14px;\n    line-height:19px;\n}\n#chartwerk #footnote,\n#chartwerk #source,\n#chartwerk #author {\n    font-size:11px;\n    color:grey;\n\n}\n#chartwerk #author {\n    text-align:right;\n}\n#chartwerk #chart{\n    background-color:white;\n}\n#chartwerk .response{\n    margin-top:5px;\n}\n#chartwerk .response p{\n    font: 13px/16px 'proxima-nova', arial, sans-serif;\n    font-weight: 200;\n}\n#chartwerk #chart .bar{\n    height:24px;\n    display:inline-block;\n}\n#chartwerk #chart .bar .label{\n    width:100%;\n    text-align:right;\n}\n#chartwerk #chart .bar .name.label{\n    width:100%;\n    text-align:right;\n    padding:5px 5px 0 0;\n    margin-left:-100%;\n    position:absolute;\n    color:#666;\n}\n#chartwerk #chart .bar .value.label p{\n    padding-right:5px;\n    padding-top:4px;\n    font-weight:bold;\n    font-size:14px;\n    line-height:18px;\n    color:#fff;\n}\n#chartwerk #chart .bar .value.label p.offset{\n    text-align:left;\n    padding-left:3px;\n    color:#666;\n}"
    },
    "template": {
        "description": "Use horizontal bar charts when you want to show comparisons of quantity. Examples include population by city, touchdowns by player or sales by vehicle model.\n\nAs a general rule, horizontal bar charts should not be used to show trends over time, for example, how many homes are purchased each year. Use a line chart instead.\n\nYour data should contain two columns:\n\n* One with the categorical labels, like \"Dallas\", \"Philadelphia\", \"Los Angeles\", etc.\n* And another that contains the numeric values that will determine the width of the bars. ",
        "icon": null,
        "tags": [],
        "title": "Horizontal bar chart"
    },
    "text": {
        "annotations": [],
        "author": "Jane Doe / POLITICO",
        "chatter": "Some states even have more letters in their names than some others.",
        "footnote": "",
        "headline": "States have names",
        "legend": {
            "active": false,
            "double": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 500
            },
            "keys": [],
            "single": {
                "align": "l",
                "background": true,
                "inside": false,
                "position": {
                    "x": 10,
                    "y": 10
                },
                "width": 250
            },
            "title": ""
        },
        "source": "SOURCE: Pew Research",
        "title": ""
    },
    "ui": {
        "datamap": [
            {
                "alias": "Category",
                "available": true,
                "class": "base"
            },
            {
                "alias": "Value",
                "available": true,
                "class": "value"
            },
            {
                "alias": "scale axis",
                "available": false,
                "class": "scale"
            },
            {
                "alias": "data series",
                "available": false,
                "class": "series"
            },
            {
                "alias": "faceting column",
                "available": false,
                "class": "facet"
            },
            {
                "alias": "ignored column",
                "available": false,
                "class": "ignore"
            }
        ],
        "rawData": "State\tNumbers\nKentucky\t8\nMassachusetts\t13\nArizona\t7\nMissouri\t8\nCalifornia\t10\nNew York\t8\nTexas\t5\n",
        "size": "single"
    }
}